// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  GOD
  ADMIN
  PLAYER
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  points        Int? @default(0)
  role          UserRole @default(PLAYER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  playgrounds TicTacToePlayGround[]
  players Player[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicTacToePlayGround {
  id String @id @default(uuid())
  inviteCode String @unique

  status String @default("ongoing")

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  board String @default("---------")

  players Player[]

  created DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Player {
  symbol String @default("X")
  name String?
  image String?
  points  Int?
  role UserRole @default(PLAYER)

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  playGroundId String
  playgrounds TicTacToePlayGround @relation(fields: [playGroundId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([playGroundId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}