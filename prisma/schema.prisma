generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  points                Int?                   @default(0)
  role                  UserRole               @default(PLAYER)
  wins                  Int                    @default(0)
  defeats               Int                    @default(0)
  allGames              Int                    @default(0)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  players               Player[]
  playgrounds           TicTacToePlayGround[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model TicTacToePlayGround {
  id         String   @id @default(uuid())
  inviteCode String   @unique @default(uuid())
  status     String   @default("ongoing")
  userId     String
  board      String   @default("         ")
  prise      Int      @default(0)
  minus      Int      @default(0)
  currentSymbol String @default("O")
  created    DateTime @default(now())
  updatedAt  DateTime @updatedAt
  players    Player[]
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Player {
  symbol       String              @default("X")
  name         String?
  image        String?
  points       Int?
  role         UserRole            @default(PLAYER)
  userId       String              @unique
  playGroundId String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  playgrounds  TicTacToePlayGround @relation(fields: [playGroundId], references: [id], onDelete: Cascade)
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([playGroundId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  GOD
  ADMIN
  PLAYER
}
